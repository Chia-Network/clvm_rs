name: Build Mac, Linux, and Windows wheels

on:
  push:
    branches:
      - main
      - dev
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build_wheels:
    name: Wheel on ${{ matrix.os }} py-${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - uses: actions/setup-python@v2
      name: Install Python ${{ matrix.python }}
      with:
        python-version: ${{ matrix.python }}

    - name: Update pip
      run: |
          python -m pip install --upgrade pip

    - name: Set up rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install dependencies
      run: |
          python -m pip install maturin

    - name: Build MacOs with maturin on Python ${{ matrix.python }}
      if: startsWith(matrix.os, 'macos')
      run: |
        python -m venv venv
        ln -s venv/bin/activate
        . ./activate
        maturin build --no-sdist -i python --release

#    - name: Build Linux with maturin on Python ${{ matrix.python }}
#      if: startsWith(matrix.os, 'ubuntu')
#      run: |
#        python -m venv venv
#        ln -s venv/bin/activate
#        . ./activate
#        maturin build -i python --release --manylinux 2010

    - name: Build Linux in manylinux2010 with maturin on Python ${{ matrix.python }}
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        podman run --rm=true \
          -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          quay.io/pypa/manylinux2010_x86_64 \
          bash -exc '\
            curl -L https://sh.rustup.rs > rustup.rs && \
            chmod +x rustup.rs && \
            ./rustup.rs -y && \
            export PATH=$HOME/.cargo/bin:$PATH && \
            rm -rf venv && \
            PY_VERSION=${{ matrix.python }}
            PY_VERSION=${PY_VERSION/.} && \
            echo "Python version with dot removed is $PY_VERSION" && \
            if [ "$PY_VERSION" = "37" ]; \
            then export SCND_VERSION="${PY_VERSION}m"; \
            else export SCND_VERSION="$PY_VERSION"; fi && \
            echo "Exporting path /opt/python/cp$PY_VERSION-cp$SCND_VERSION/bin" && \
            export PATH=/opt/python/cp$PY_VERSION-cp$SCND_VERSION/bin/:$PATH && \
            /opt/python/cp38-cp38/bin/python -m venv venv && \
            if [ ! -f "activate" ]; then ln -s venv/bin/activate; fi && \
            . ./activate && \
            pip install maturin && \
            maturin build --no-sdist --release --manylinux 2010 \
          '

    - name: Build Windows with maturin on Python ${{ matrix.python }}
      if: startsWith(matrix.os, 'windows')
      run: |
        python -m venv venv
        . .\venv\Scripts\Activate.ps1
        ln -s venv\Scripts\Activate.ps1 activate
        maturin build --no-sdist -i python --release

    - name: Install dependencies
      run: |
        . ./activate
        pip install target/wheels/clvm_rs-*.whl
        python -m pip install pytest
        python -m pip install blspy

    - name: install clvm & clvm_tools
      run: |
        . ./activate
        git clone https://github.com/Chia-Network/clvm.git --branch=develop --single-branch
        python -m pip install ./clvm

        git clone https://github.com/Chia-Network/clvm_tools.git --branch=develop --single-branch
        python -m pip install ./clvm_tools

    - name: Ensure clvm, clvm_rs, clvm_tools are installed
      run: |
        . ./activate
        python -c 'import clvm'
        python -c 'import clvm; print(clvm.__file__)'
        python -c 'import clvm_rs; print(clvm_rs.__file__)'
        python -c 'import clvm_tools; print(clvm_tools.__file__)'

    - name: Run tests from clvm
      run: |
        . ./activate
        cd clvm
        python -m py.test tests

    - name: Run tests from clvm_tools
      continue-on-error: true
      run: |
        . ./activate
        cd clvm_tools
        python -m py.test tests

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: ./target/wheels/

    - name: Install Twine
      run: pip install twine

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo ::set-output name=HAS_SECRET::${HAS_SECRET}
      env:
        SECRET: "${{ secrets.test_pypi_password }}"

    - name: publish (PyPi)
      if: startsWith(github.event.ref, 'refs/tags') && steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

    - name: publish (Test PyPi)
      if: steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

  checks:
    runs-on: ubuntu-20.04
    name: Checks
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
            override: true
            components: rustfmt, clippy
      - name: Clippy
        run: cargo clippy -- -D warnings
      - name: fmt
        run: cargo fmt -- --files-with-diff --check

  unit_tests:
    runs-on: ubuntu-20.04
    name: Unit tests
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            components: rustfmt, clippy
      - name: cargo test
        run: cargo test --no-default-features
