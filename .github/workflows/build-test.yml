name: build - check - upload

on:
  push:
    branches:
    - main
    tags:
    - '**'
  pull_request:
    branches:
    - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build-wheels:
    name: Wheel - ${{ matrix.os.name }} ${{ matrix.python.major-dot-minor }} ${{ matrix.arch.name }}
    runs-on: ${{ matrix.os.runs-on[matrix.arch.matrix] }}
    strategy:
      fail-fast: false
      # TODO: switch back to abi3/single python version builds.  (or maybe not?)
      matrix:
        os:
          - name: macOS
            matrix: macos
            runs-on:
              arm: [macOS, ARM64]
              intel: [macos-latest]
          - name: Ubuntu
            matrix: ubuntu
            runs-on:
              arm: [Linux, ARM64]
              intel: [ubuntu-latest]
          - name: Windows
            matrix: windows
            runs-on:
              intel: [windows-latest]
        python:
          - major-dot-minor: '3.7'
            cibw-build: 'cp37-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.7'
          - major-dot-minor: '3.8'
            cibw-build: 'cp38-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.8'
          - major-dot-minor: '3.9'
            cibw-build: 'cp39-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.9'
          - major-dot-minor: '3.10'
            cibw-build: 'cp310-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.10'
          - major-dot-minor: '3.11'
            cibw-build: 'cp311-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.11'
        arch:
          - name: ARM
            matrix: arm
          - name: Intel
            matrix: intel
        exclude:
          # Only partial entries are required here by GitHub Actions so generally I
          # only specify the `matrix:` entry.  The super linter complains so for now
          # all entries are included to avoid that.  Reported at
          # https://github.com/github/super-linter/issues/3016
          - os:
              name: Windows
              matrix: windows
              runs-on:
                intel: [windows-latest]
            arch:
              name: ARM
              matrix: arm
          - os:
              name: macOS
              matrix: macos
              runs-on:
                arm: [macOS, ARM64]
                intel: [macos-latest]
            python:
              major-dot-minor: '3.7'
              cibw-build: 'cp37-*'
              matrix: '3.7'
            arch:
              name: ARM
              matrix: arm

    steps:
    - name: Clean workspace
      uses: Chia-Network/actions/clean-workspace@main

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Chia-Network/actions/setup-python@main
      with:
        python-version: ${{ matrix.python.major-dot-minor }}

    - name: Update pip
      run: |
          python -m pip install --upgrade pip

    - name: Set up rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Install dependencies
      run: |
          python -m pip install maturin

    - name: Build MacOs with maturin on Python ${{ matrix.python }}
      if: matrix.os.matrix == 'macos'
      env:
        MACOSX_DEPLOYMENT_TARGET: ${{ matrix.arch.matrix == 'intel' && '10.14' || '11.0' }}
      run: |
        python${{ matrix.python.major-dot-minor }} -m venv venv
        . venv/bin/activate
        maturin build -i python --release -m wheel/Cargo.toml
        # TODO: add back these?  --strip --features=openssl

    - name: Build Linux with maturin on Python ${{ matrix.python }}
      if: matrix.os.matrix == 'ubuntu'
      run: |
        podman run --rm=true \
          -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ matrix.python.by-arch[matrix.arch.matrix].docker-url }} \
          bash -exc '\
            curl -L https://sh.rustup.rs > rustup-init.sh && \
            sh rustup-init.sh -y && \
            yum -y install openssl-devel && \
            source $HOME/.cargo/env && \
            rustup target add ${{ matrix.python.by-arch[matrix.arch.matrix].rustup-target }} && \
            python${{ matrix.python.major-dot-minor }} -m venv /venv && \
            . /venv/bin/activate && \
            pip install --upgrade pip && \
            pip install maturin && \
            CC=gcc maturin build --release --manylinux ${{ matrix.python.by-arch[matrix.arch.matrix].manylinux-version }} -m wheel/Cargo.toml \
          '
          # TODO: add back these?  --strip --features=openssl

    - name: Build Windows with maturin on Python ${{ matrix.python }}
      if: matrix.os.matrix == 'windows'
      run: |
        py -${{ matrix.python.major-dot-minor }} -m venv venv
        . .\venv\Scripts\Activate.ps1
        maturin build -i python --release -m wheel/Cargo.toml
        # TODO: add back these?  --strip
        # TODO: why no --feature=openssl here?

    - uses: Chia-Network/actions/create-venv@main
      id: create-venv

    - uses: Chia-Network/actions/activate-venv@main
      with:
        directories: ${{ steps.create-venv.outputs.activate-venv-directories }}

    - name: Install clvm_rs wheel
      run: |
        pip install --no-index --find-links wheel/target/wheels/ clvm_rs

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: ./wheel/target/wheels/

#  check-typestubs:
#    name: Check clvm_rs.pyi
#    runs-on: ubuntu-latest
#
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v3
#      with:
#        fetch-depth: 0
#
#    - uses: Chia-Network/actions/setup-python@main
#
#    - name: check generated clvm_rs.pyi
#      run: |
#        python wheel/generate_type_stubs.py
#        git diff --exit-code

  build-sdist:
    name: sdist - ${{ matrix.os.name }} ${{ matrix.python.major-dot-minor }} ${{ matrix.arch.name }}
    runs-on: ${{ matrix.os.runs-on[matrix.arch.matrix] }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Ubuntu
            matrix: ubuntu
            runs-on:
              arm: [Linux, ARM64]
              intel: [ubuntu-latest]
        python:
          - major-dot-minor: '3.7'
            matrix: '3.7'
        arch:
          - name: Intel
            matrix: intel

    steps:
    - name: Clean workspace
      uses: Chia-Network/actions/clean-workspace@main

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Chia-Network/actions/setup-python@main
      with:
        python-version: ${{ matrix.python.major-dot-minor }}

    - name: Build source distribution
      run: |
        pip install maturin
        maturin sdist -m wheel/Cargo.toml

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: ./wheel/target/wheels/

  fmt:
    runs-on: ubuntu-latest
    name: cargo fmt
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
            # TODO: was stable before, should probably be consistent across projects
            toolchain: nightly
            # TODO: why are we installing clippy here...
            components: rustfmt, clippy
            override: true
      - name: fmt
        # TODO: didn't have --all before
        run: cargo fmt --all -- --files-with-diff --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          # TODO: was stable before, should probably be consistent across projects
          toolchain: nightly
          components: clippy
          override: true
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # TODO: didn't use --workspace before, what's that do?
          args: --all-features --workspace

  # leaving out Windows fuzzing for now though it seems supported
  # https://llvm.org/docs/LibFuzzer.html#q-does-libfuzzer-support-windows
  fuzz_targets:
    name: Run fuzz targets
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: nightly
      - name: cargo-fuzz
        run: cargo +nightly install cargo-fuzz
      - name: cargo fuzz
        run: cargo fuzz list | xargs -I "%" sh -c "cargo +nightly fuzz run % -- -max_total_time=30 || exit 255"

  unit_tests:
    name: Unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        release:
          - name: release
            options: --release
          - name: not-release
            options: ''
        features:
          - name: no features
            options: ''
          - name: counters
            options: --features=counters
          - name: pre-eval
            options: --features=pre-eval
          - name: pre-eval and counters
            options: --features=pre-eval,counters
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
      - name: cargo test
        run: cargo test ${{ matrix.features.options}} ${{ matrix.release.options }}

  clvm_tests:
    name: ${{ matrix.package.name }} tests - ${{ matrix.os.name }} ${{ matrix.python.major-dot-minor }} ${{ matrix.arch.name }}
    runs-on: ${{ matrix.os.runs-on[matrix.arch.matrix] }}
    needs:
      - build-wheels
    strategy:
      fail-fast: false
      matrix:
        package:
          - name: CLVM
            directory: clvm
            matrix: clvm
          - name: CLVM tools
            directory: clvm_tools
            matrix: clvm_tools
        os:
          - name: macOS
            matrix: macos
            runs-on:
              arm: [macOS, ARM64]
              intel: [macos-latest]
          - name: Ubuntu
            matrix: ubuntu
            runs-on:
              arm: [Linux, ARM64]
              intel: [ubuntu-latest]
          - name: Windows
            matrix: windows
            runs-on:
              intel: [windows-latest]
        python:
          - major-dot-minor: '3.7'
            cibw-build: 'cp37-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.7'
          - major-dot-minor: '3.8'
            cibw-build: 'cp38-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.8'
          - major-dot-minor: '3.9'
            cibw-build: 'cp39-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.9'
          - major-dot-minor: '3.10'
            cibw-build: 'cp310-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.10'
          - major-dot-minor: '3.11'
            cibw-build: 'cp311-*'
            by-arch:
              arm:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_aarch64
                rustup-target: aarch64-unknown-linux-musl
              intel:
                manylinux-version: 2014
                docker-url: quay.io/pypa/manylinux2014_x86_64
                rustup-target: x86_64-unknown-linux-musl
            matrix: '3.11'
        arch:
          - name: ARM
            matrix: arm
          - name: Intel
            matrix: intel
        exclude:
          # Only partial entries are required here by GitHub Actions so generally I
          # only specify the `matrix:` entry.  The super linter complains so for now
          # all entries are included to avoid that.  Reported at
          # https://github.com/github/super-linter/issues/3016
          - os:
              name: Windows
              matrix: windows
              runs-on:
                intel: [windows-latest]
            arch:
              name: ARM
              matrix: arm
          - os:
              name: macOS
              matrix: macos
              runs-on:
                arm: [macOS, ARM64]
                intel: [macos-latest]
            python:
              major-dot-minor: '3.7'
              cibw-build: 'cp37-*'
              matrix: '3.7'
            arch:
              name: ARM
              matrix: arm
    steps:
      - name: Clean workspace
        uses: Chia-Network/actions/clean-workspace@main

      - name: Checkout CLVM
        uses: actions/checkout@v3
        with:
          repository: Chia-Network/clvm
          path: clvm

      - name: Checkout CLVM tools
        if: matrix.package.matrix == 'clvm_tools'
        uses: actions/checkout@v3
        with:
          repository: Chia-Network/clvm_tools
          path: clvm_tools

      - uses: Chia-Network/actions/setup-python@main
        with:
          python-version: ${{ matrix.python.major-dot-minor }}

      - uses: Chia-Network/actions/create-venv@main
        id: create-venv

      - uses: Chia-Network/actions/activate-venv@main
        with:
          directories: ${{ steps.create-venv.outputs.activate-venv-directories }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: packages
          path: ./dist

      - name: Install packages
        run: |
          # TODO: review how to get relevant test stuff installed
          WHEEL_PATH=dist/$(pip install --no-index --dry-run --find-links dist/ clvm_rs | sed -n 's;^.*/dist/\(.*\)$;\1;p')
          if [ "${WHEEL_PATH}" = "" ]
          then
            echo error: wheel not selected!
            exit 1
          fi
          pip install "${WHEEL_PATH}" ./clvm ${{ matrix.package.matrix == 'clvm_tools' && './clvm_tools' || '' }} blspy pytest
          python -c 'import clvm; print(clvm.__file__)'
          python -c 'import clvm_rs; print(clvm_rs.__file__)'
          if [ "${{ matrix.packages.matrix == 'clvm_tools' && 'true' || 'false' }}" = "true" ]
          then
            python -c 'import clvm_tools; print(clvm_tools.__file__)'
          fi

      - name: Test
        run: |
          pytest ${{ matrix.package.directory }}/tests

  upload:
    name: Upload to PyPI - ${{ matrix.os.name }} ${{ matrix.python.major-dot-minor }} ${{ matrix.arch.name }}
    runs-on: ${{ matrix.os.runs-on[matrix.arch.matrix] }}
    needs:
      - build-wheels
      - build-sdist
      - fmt
      - clippy
      - fuzz_targets
      - unit_tests
      - clvm_tests
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: Ubuntu
            matrix: ubuntu
            runs-on:
              arm: [Linux, ARM64]
              intel: [ubuntu-latest]
        python:
          - major-dot-minor: '3.9'
            matrix: '3.9'
        arch:
          - name: Intel
            matrix: intel

    steps:
    - name: Clean workspace
      uses: Chia-Network/actions/clean-workspace@main

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - uses: Chia-Network/actions/setup-python@main
      with:
        python-version: ${{ matrix.python.major-dot-minor }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: ./dist

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo "HAS_SECRET=${HAS_SECRET}" >>$GITHUB_OUTPUT
      env:
        SECRET: "${{ secrets.test_pypi_password }}"

    - name: Install twine
      run: pip install twine

    - name: Publish distribution to PyPI
      if: startsWith(github.event.ref, 'refs/tags') && steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: twine upload --non-interactive --skip-existing --verbose 'dist/*'
