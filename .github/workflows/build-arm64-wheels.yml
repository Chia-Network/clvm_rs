name: Build ARM64 wheels on ubuntu-latest

on:
  push:
    branches:
      - main
      - dev
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build_wheels:
    name: ARM64 Python Wheels on ubuntu-latest
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ARM64 ] # , ubuntu-latest ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 1

    - name: Set up QEMU on x86_64
      if: startsWith(matrix.os, 'ubuntu-latest')
      id: qemu
      uses: docker/setup-qemu-action@v1
      with:
        platforms: arm64

    - name: Build Python wheels
      run: |
        podman run --rm=true \
          -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          quay.io/pypa/manylinux2014_aarch64 \
          bash -exc '\
            echo $PATH && \
            curl -L https://sh.rustup.rs > rustup.rs && \
            chmod +x rustup.rs && \
            ./rustup.rs -y && \
            export PATH=$HOME/.cargo/bin:$PATH && \
            rm -rf venv && \
            export PATH=/opt/python/cp39-cp39/bin/:$PATH && \
            export PATH=/opt/python/cp38-cp38/bin/:$PATH && \
            export PATH=/opt/python/cp37-cp37m/bin/:$PATH && \
            /opt/python/cp38-cp38/bin/python -m venv venv && \
            if [ ! -f "activate" ]; then ln -s venv/bin/activate; fi && \
            . ./activate && \
            pip install maturin && \
            maturin build --no-sdist --release --manylinux 2014 \
          '

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: target/wheels/

    - name: Install Twine
      run: |
        if [ ! -f "venv" ]; then rm -rf venv; fi
        sudo apt-get install python3-venv python3-pip -y
        python3 -m venv venv
        if [ ! -f "activate" ]; then ln -s venv/bin/activate; fi
        . ./activate
        pip install setuptools_rust
        pip install twine

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo ::set-output name=HAS_SECRET::${HAS_SECRET}
      env:
        SECRET: "${{ secrets.test_pypi_password }}"

    - name: publish (PyPi)
      if: startsWith(github.event.ref, 'refs/tags') && steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        . ./activate
        twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

    - name: publish (Test PyPi)
      if: steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_REPOSITORY_URL: https://test.pypi.org/legacy/
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.test_pypi_password }}
      run: |
        . ./activate
        twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

    - name: Clean up AMR64
      if: startsWith(matrix.os, 'ARM64')
      run: |
        rm -rf venv
        rm -rf dist
