name: Build ARM64 wheels on ubuntu-latest

on:
  push:
    branches:
      - main
      - dev
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

jobs:
  build_wheels:
    name: ARM64 Python Wheels on ARM64 Ubuntu
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ARM64, Linux]
    container:
          image: ghcr.io/chia-network/build-images/centos-pypa-rust-aarch64:latest

    steps:
    - uses: Chia-Network/actions/clean-workspace@main

    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1

    - name: Setup for python wheel build
      run: |
        echo "${PATH}"
        yum -y install openssl-devel
        source /root/.cargo/env
        rustup default stable
        rustup target add aarch64-unknown-linux-musl
        rm -rf venv
        export PATH="${PATH}:/opt/python/cp39-cp39/bin/:/opt/python/cp38-cp38/bin/:/opt/python/cp37-cp37m/bin/"

    - name: Build Python wheels
      run: |
        /opt/python/cp38-cp38/bin/python -m venv venv
        if [ ! -f "activate" ]; then ln -s venv/bin/activate; fi
        . ./activate
        pip install maturin==0.12.20
        CC=gcc maturin build --release --strip --manylinux 2014 --no-sdist --cargo-extra-args=--all-features

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: target/wheels/

    - name: Clean up ARM64
      if: startsWith(matrix.os, 'ARM64')
      run: |
        rm -rf venv
        rm -rf dist

  publish_wheels:
    name: Publish ARM64 Python Wheels
    runs-on: ubuntu-latest
    needs: build_wheels

    steps:
    - name: Fetch wheels from previous job
      uses: actions/download-artifact@v3
      with:
        name: wheels
        path: target/wheels/

    - name: Install Twine
      run: |
        if [ ! -f "venv" ]; then sudo rm -rf venv; fi
        sudo apt-get install python3-venv python3-pip -y
        python3 -m venv venv
        if [ ! -f "activate" ]; then ln -s venv/bin/activate; fi
        . ./activate
        pip3 install setuptools_rust
        pip3 install twine

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo "HAS_SECRET=${HAS_SECRET}" >>$GITHUB_OUTPUT
      env:
        SECRET: "${{ secrets.test_pypi_password }}"

    - name: Publish (PyPi)
      if: startsWith(github.event.ref, 'refs/tags') && steps.check_secrets.outputs.HAS_SECRET
      env:
        TWINE_USERNAME: __token__
        TWINE_NON_INTERACTIVE: 1
        TWINE_PASSWORD: ${{ secrets.pypi_password }}
      run: |
        . ./activate
        twine upload --non-interactive --skip-existing --verbose 'target/wheels/*'

    - name: Clean up AMR64
      if: startsWith(matrix.os, 'ARM64')
      run: |
        rm -rf venv
        rm -rf dist
